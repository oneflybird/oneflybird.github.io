<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>利用github把本地图片显示到博客上的方法</title>
      <link href="/2018/11/21/%E5%88%A9%E7%94%A8github%E6%8A%8A%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/11/21/%E5%88%A9%E7%94%A8github%E6%8A%8A%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%88%B0%E5%8D%9A%E5%AE%A2%E4%B8%8A%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>上方展示的图片就是把本地图片传到github然后展示在博客上的结果</p><hr><blockquote><p>想法来源：与某位兄弟聊天时的灵光一闪+闲的慌+知乎+没钱买域名用图床</p></blockquote><h2><span id="准备工作">准备工作</span></h2><ol><li><p>注册了一个github的账号</p></li><li><p>git教程，推荐<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">雪峰老师的网站</a></p></li><li>有git bash</li></ol><hr><h2><span id="新手版">新手版</span></h2><p>第一步，初始化一个文件夹为仓库</p><pre><code>git init</code></pre><p>第二步，将本地仓库与远程仓库连接起来，这里将远程仓库命名为remote images（如何创建远程仓库并进行关联请看git教程）</p><pre><code>git remote add remoteimages github上自己的ssr</code></pre><p>第三步，将本地仓库里的图片添加到暂存区(可一次性add多个图片，只需在后面加上其他图片名)</p><pre><code>git add 图片名</code></pre><p>第四步，提交，注释会成为github上的备注，<strong>注意注释两边是单引号</strong></p><pre><code>git commit -m &#39;注释&#39;</code></pre><p>第五步，推送到远程库</p><pre><code>git push remoteimages master</code></pre><p>第一次推送成功后可简化为</p><pre><code>git push</code></pre><hr><h2><span id="进阶版推送分支">进阶版（推送分支）</span></h2><blockquote><p> 推送分支原因：可进行分类和<em>熟练分支操作（笑</em></p></blockquote><p><strong>在新手版第二步和第三步之前添加</strong></p><p>进阶版第一步：创建并切换分支,此时把新分支命名为people（更多关于分支的教程请看上方git教程）</p><pre><code>checkout -b people</code></pre><p>在分支里commit完图片之后</p><p>第四步：推送到远程仓库，注意原来的master已改成现在的分支名字</p><pre><code>git push remoteimages people</code></pre><p>若想进行简化命令，需要先进行分支关联</p><pre><code>git branch --set-upstream 远程仓库命 需要关联的分支名，比如此处是people</code></pre><p>关联后可进行简化</p><pre><code>git push</code></pre><hr><h2><span id="最后一步啦撒花">最后一步啦撒花！！</span></h2><p>从github的仓库里找到自己需要用到的图片，点击download，复制上方链接即可。</p><h2><span id="一些常用git命令补充">一些常用git命令补充</span></h2><p>查看当前分支</p><pre><code>git branch</code></pre><p>创建分支</p><pre><code>git branch 分支名</code></pre><p>切换分支</p><pre><code>git checkout 分支名</code></pre><p>强行删除分支(通常用于分支里的工作区和缓存区还有文件的情况下)</p><pre><code>git branch -D</code></pre><p>删除分支</p><pre><code>git branch -d</code></pre><p>合并分支：将分支都合并到当前分分支上</p><pre><code>git merge 当前文件名</code></pre><p>查看当前工作区和暂存区的情况</p><pre><code>git status</code></pre><p>删除远程文件</p><pre><code>git rm 需要删除的文件名</code></pre><pre><code>git commit -m 注释</code></pre><pre><code>git push</code></pre><p>不删除本地文件仅删除远程文件</p><pre><code>git rm --cache 文件名（路径）</code></pre><pre><code>git push</code></pre><hr><h2><span id="总结">总结</span></h2><p>这次达成目的的过程还是很顺利的，完美的解决了自己一个多星期以来的问题，github真是太棒了！！顺便还复习了下git23333，发现自己对分支那块还是理解的不透彻呢，等以后用到的时候再去理解吧（笑</p>]]></content>
      
      
      <categories>
          
          <category> little knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>今天的小收获系列之一</title>
      <link href="/2018/11/20/%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E6%94%B6%E8%8E%B7%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80/"/>
      <url>/2018/11/20/%E4%BB%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E6%94%B6%E8%8E%B7%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要内容为hexo静态博客和动态博客的区别，cookie和一个git里显示‘/’路径的小贴士</p></blockquote><h2><span id="hexo静态博客和动态博客的区别">hexo静态博客和动态博客的区别</span></h2><p>文章来源：<a href="https://m.baidu.com/from=1011440l/bd_page_type=1/ssid=0/uid=0/pu=usm%402%2Csz%40320_1001%2Cta%40iphone_2_8.1_24_62.0/baiduid=9624EEC468661DF6136DB86405641041/w=10_10_/t=iphone/l=3/tc?ref=www_iphone&amp;lid=10867688142781950688&amp;order=3&amp;fm=alop&amp;isAtom=1&amp;is_baidu=0&amp;tj=www_normal_3_10_10_title&amp;vit=osres&amp;m=8&amp;srd=1&amp;cltj=cloud_title&amp;asres=1&amp;title=%E6%90%AD%E5%BB%BAHexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B-%E5%8A%A8%E6%80%81%E4%B8%8E%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8C%BA%E5%88%AB%7C%E7%BF%94%E5%85%BD...&amp;dict=32&amp;wd=&amp;eqid=96d1c8c9503e2800100000025bf36a58&amp;w_qd=IlPT2AEptyoA_yk66uAd5gixIE-SiGooxjQYiBPVr4i&amp;tcplug=1&amp;sec=34321&amp;di=922240928aa871e7&amp;bdenc=1&amp;tch=124.388.279.506.0.0&amp;nsrc=IlPT2AEptyoA_yixCFOxXnANedT62v3IJBaOMmBHBi3mjo39hLWxBgQqE7eqAp8GS9Cb9jDLxBt8tUGh3m5mz_EvuBdlxldRzkuM8_m5rADrGQ2fhxYZChPnHGU_s_nQbLxPc12tEMEsVH9Ozq4Jos94u2_pbcYob2a2hWTGs3br2pTvZUb-mUqT_kk4ODqcOOfYaPqznHEuLZrd3dOhJISRnXRUQyhvcLrqbu-ZQ3WYpnJzHtm7Dc23WV7YIiw1ZhvrU2nvwRDJXiNYqJ15TnFR8XH-5t3ZIUa&amp;clk_type=1&amp;l=1&amp;baiduid=9624EEC468661DF6136DB86405641041&amp;w=10_10_%E4%BB%80%E4%B9%88%E5%8F%AB%E5%8A%A8%E6%80%81%E5%8D%9A%E5%AE%A2&amp;t=iphone&amp;from=1011440l&amp;ssid=0&amp;uid=0&amp;bd_page_type=1&amp;pu=usm%402%2Csz%40320_1001%2Cta%40iphone_2_8.1_24_62.0&amp;clk_info=%7B%22srcid%22%3A1599%2C%22tplname%22%3A%22www_normal%22%2C%22t%22%3A1542679132628%2C%22xpath%22%3A%22div-article-section-div-div-a-div-div-span%22%7D&amp;sfOpen=1" target="_blank" rel="noopener">静态博客和动态博客的区别</a></p><p>浏览网站的这一过程，本质上就是自己电脑上的浏览器程序解释通过Http协议从网站上下载下来的HTML文本的过程。而动态博客与静态博客的区别就在于这样一个HTML文本是通过什么方式生成的。</p><p>对于<strong>动态博客</strong>来说，每当你访问一个页面时（例如博文目录），就会根据对应页面的逻辑去数据库中查询相应信息（查询当前所有文章信息），根据当前博客站点的主题取一个模板文件按照HTML语法填入相应信息（填入文章名、文章日期、文章摘要等，还可以作分页，依据逻辑而定），组合成一个HTML文本，下发给访问者。</p><p>而对于<strong>静态博客</strong>来说，这整个将模板渲染为可被浏览器直接识别的HTML文本的任务是早在博文写好的那一刻完成的。事实上，我们说的静态的博客，也就可以看作是一个托管许多互相跳转的HTML文本文件服务器罢了。</p><p>也许有的人会问：既然对于访问者来说都生成了一个博客网页，那么动态博客与静态博客用起来又有什么区别呢？</p><p>事实上，动态博客在生成网页的时候还可以有更多“花招”。例如，你需要一个带有权限组的博客系统，某些内容只有拥有账号的访问者才能看到。博客“程序”可以维护一组cookie的状态，当一个新的访问者访问内容时，查询他对应的cookie状态是否为已登录，如果未登录，则下发一个“登录界面”给他，并处理登录逻辑。</p><p>总而言之，<strong>“动态”一词指的本来就是一个页面并不是固定的，而是依据状态、不同的访问者而改变的，动态博客也得益于此可以具有许多功能</strong>。</p><p>其实这里还有一个问题，那是不是意味着静态博客除了发布文章以外就不能实现别的功能了呢？毕竟它只是相当于托管了一组HTML文件而已，不能提供“动态”的效果。</p><p>非也非也，刚才说的只是服务端那边的花招，其实除此以外还有文章可作。</p><p>比如，使用ajax技术：由服务端下发到浏览器中的HTML文件中并不是只有文件内容而已，其实，它还可以承装脚本。而javascript在浏览器中被执行时拥有改变当前HTML内容的能力，因此，可以在此处写与之前动态博客渲染模板相仿的逻辑。</p><p>但是，如果在静态博客中使用这样的技术，静态博客就失去了与动态博客相比的高性能、高安全性了（因为javascript发挥作用显然也需要布置后端程序、数据库在服务器上），因此，静态博客中一般不部署产生动态内容的功能，或是仅在网页中植入一点第三方提供的如评论、分享等功能。</p><hr><h2><span id="cookie">COOKIE</span></h2><p>cookie是<strong>临时文件</strong>，Cookies是一种能够让网站服务器把少量数据储存到客户端的硬盘或内存，或是从客户端的硬盘读取数据的一种<strong>技术</strong>。Cookies是当你浏览某网站时，由Web服务器置于你硬盘上的一个非常小的文本文件，它可以记录你的用户ID、密码、浏览过的网页、停留的时间等信息。</p><p>当你再次来到该网站时，网站通过读取Cookies，得知你的相关信息，就可以做出相应的动作，如在页面显示欢迎你的标语，或者让你不用输入ID、密码就直接登录等等。从本质上讲，它可以看作是你的身份证。但Cookies不能作为代码执行，也不会传送病毒，且为你所专有，并<strong>只能由提供它的服务器来读取</strong>。保存的信息片断以”名/值”对(name-value pairs)的形式储存，一个”名/值”对仅仅是一条命名的数据。一个网站只能取得它放在你的电脑中的信息，它无法从其它的Cookies文件中取得信息，也无法得到你的电脑上的其它任何东西。 Cookies中的内容大多数经过了<em>加密处理</em>，因此一般用户看来只是一些毫无意义的字母数字组合，只有服务器的CGI处理程序才知道它们真正的含义。</p><p>由于Cookies是我们浏览的网站传输到用户计算机硬盘中的文本文件或内存中的数据，因此它在硬盘中存放的位置与使用的<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">操作系统</a>和浏览器密切相关。在Windows 9X系统计算机中，Cookies文件的存放位置为C:/Windows/Cookies，在Windows NT/2000/XP的计算机中，Cookies文件的存放位置为C:/Documents and Settings/用户名/Cookies。</p><p>硬盘中的Cookies文件可以被<a href="https://www.baidu.com/s?wd=Web%E6%B5%8F%E8%A7%88%E5%99%A8&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">Web浏览器</a>读取，它的命令格式为：用户名@网站地址[数字].txt。如笔者计算机中的一个Cookies文件名为：ch@163[1].txt。要注意的是：硬盘中的Cookies属于文本文件，不是程序。  </p><hr><h2><span id="一个git里显示路径的小贴士">一个git里显示‘/’路径的小贴士</span></h2><p>一般git里面仓库操作不能到‘/’，所以如果显示‘/’，说明这是模拟路径，是虚拟出来的一个根目录，下面链接到盘符，实际在安装目录（/c/xxx）【未尝试过，不确定是在c盘还是在实际安装目录】</p>]]></content>
      
      
      <categories>
          
          <category> little knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
            <tag> 存储路径 </tag>
            
            <tag> 动态博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>archlinux基础安装步骤</title>
      <link href="/2018/11/18/archlinux%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
      <url>/2018/11/18/archlinux%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>使用虚拟机安装archlinux的步骤简单介绍,一下都是legacy启动模式</p><hr><h2><span id="参考资料">参考资料</span></h2><ol><li><a href="https://wiki.archlinux.org/index.php/Installation_guide" target="_blank" rel="noopener">ArchWiki</a>，根据上面指令即可完成安装</li><li><a href="https://www.jianshu.com/p/98b8965b1d10" target="_blank" rel="noopener">在 VirtualBox 里安装 Arch Linux 操作系统</a></li><li><a href="https://www.cnblogs.com/zhaojiedi1992/p/zhaojiedi_linux_039_fdisk_gdisk_parted.html" target="_blank" rel="noopener">linux下（fdisk,gdisk,parted）三种分区工具比较</a></li><li><a href="http://blog.51cto.com/wushank/1244191" target="_blank" rel="noopener">linux分区之ext2,ext3,ext4,gpt</a></li><li><a href="https://blog.csdn.net/qq_39521554/article/details/79501714" target="_blank" rel="noopener">Linux学习笔记（二）：什么是挂载？mount的用处在哪?</a></li><li><a href="https://my.oschina.net/itlangz/blog/1936094" target="_blank" rel="noopener">Arch Linux 基本系统安装教程( UEFI+GPT ) </a></li></ol><hr><h2><span id="archlinux和linux的联系">ArchLinux和Linux的联系</span></h2><p>商家将Linux系统的内核与外围应用软件和文档包装起来, 并提供系统安装界面和系统设置管理工具, 这样就构成了一个发行版本, <strong>ArchLinux</strong>是其中一个发行版本。</p><h3><span id="archlinux-principles">Archlinux Principles</span></h3><blockquote><ul><li><p>Simplicity:  Arch Linux defines simplicity as <em>without unnecessary additions or modifications</em>.</p></li><li><p>Modernity:  a one-time installation with continuous upgrades</p></li><li><p>Pragmatism(实用): The large number of packages and build scripts in the various Arch Linux repositories offer free and open source software for those who prefer it, as well as proprietary software packages for those who embrace functionality over ideology.                  </p></li><li><p>翻译：Arch Linux 的仓库中包含大量的软件包和编译脚本。用户可以按照需要进行自由选择。仓库中既提供了开源、自由的软件，也提供了闭源软件。<strong>实用性大于意识形态</strong>.</p></li><li><p>User centrality: All users are encouraged to <a href="https://wiki.archlinux.org/index.php/Getting_involved" target="_blank" rel="noopener">participate</a> and contribute to the distribution.</p></li><li><p>Versality(通用): Arch Linux is a general-purpose distribution. Upon installation, only a command-line environment is provided: rather than tearing out unneeded and unwanted packages, the user is offered the ability to build a custom system by choosing among thousands of high-quality packages provided in the <a href="https://wiki.archlinux.org/index.php/Official_repositories" target="_blank" rel="noopener">official repositories</a> for the <a href="https://en.wikipedia.org/wiki/x86-64" target="_blank" rel="noopener">x86-64</a> architecture.</p><p>Arch is backed by <a href="https://wiki.archlinux.org/index.php/Pacman" target="_blank" rel="noopener">pacman</a>, a lightweight, simple and fast package manager that allows to upgrade the entire system with one command. Arch also provides the <a href="https://wiki.archlinux.org/index.php/Arch_Build_System" target="_blank" rel="noopener">Arch Build System</a>, a ports-like system to make it easy to build and install packages from source, which can also be synchronized with one command. In addition, the <em>Arch User Repository</em> contains many thousands more of community-contributed <a href="https://wiki.archlinux.org/index.php/PKGBUILD" target="_blank" rel="noopener">PKGBUILD</a> scripts for compiling installable packages from source using the <a href="https://wiki.archlinux.org/index.php/Makepkg" target="_blank" rel="noopener">makepkg</a> application. It is also possible for users to build and maintain their own custom repositories with ease. </p><p>翻译：Arch Linux 是通用发行版，初始安装仅提供命令行环境：用户不需要删除大量不需要的软件包，而是可以从<a href="https://wiki.archlinux.org/index.php/%E5%AE%98%E6%96%B9%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93" target="_blank" rel="noopener">官方软件仓库</a>成千上万的高质量软件包中进行选择，搭建自己的系统。支持<a href="https://en.wikipedia.org/wiki/x86-64" target="_blank" rel="noopener">x86-64</a> 架构。</p><p>Arch有一个易用的<a href="https://en.wikipedia.org/wiki/Package_manager" target="_blank" rel="noopener">包管理系统</a><a href="https://wiki.archlinux.org/index.php/Pacman_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">Pacman</a>)，仅凭一条命令就升级整个系统。Arch还提供一个类似ports的包构建系统（<a href="https://wiki.archlinux.org/index.php/Arch_Build_System_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">Arch Build System</a>)），通过它可以轻松从源码构建和安装软件包，并用一个命令完成同步。你甚至可以用一个命令重新构建整个系统。Arch还提供<a href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">Arch User Repository</a>)，它包含了数千个由用户维护的<a href="https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">PKGBUILD</a>)脚本，配合<a href="https://wiki.archlinux.org/index.php/Makepkg_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="noopener">makepkg</a>)工具，从编译到打包一气呵成。用户还能轻松构建和维护属于自己的自定义软件源。                                                                                                                      </p></li></ul></blockquote><h3><span id="算了还是用中文吧">算了还是用中文吧</span></h3><h2><span id="准备工作">准备工作</span></h2><h3><span id="下载archlinux">下载archlinux</span></h3><p>推荐从<a href="https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/" target="_blank" rel="noopener">清华镜像站</a>任选一个版本下载</p><h4><span id="什么是开源镜像站">什么是开源镜像站</span></h4><p>因为源的主机在一个地方，其它一些稍微远的地方的机器从这个源上更新比较慢，所以就会在离自己近的地方将这个源同步复制过来，这样从镜像站的源更新就会比之前快很多了。所以这就是为什么会有很多大学镜像站，因为都是同步到了校园内的主机，对于校园内网来说速度会飞快。（然而hdu并没有嘤嘤嘤）</p><h4><span id="不同的iso版本有什么区别吗">不同的ISO版本有什么区别吗</span></h4><p>我也不知道，大概没有吧</p><h4><span id="x86-64">x86-64</span></h4><p>X86-64可在同一时间内处理64位的整数运算，并兼容X86-32架构。其中支持64位逻辑定址，同时提供转换为32位定址选项；但数据操作指令默认为32位和8位，提供转换成64位和16位的选项；支持常规用途<a href="https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8/187682" target="_blank" rel="noopener">寄存器</a>，如果是32<a href="https://baike.baidu.com/item/%E4%BD%8D%E8%BF%90%E7%AE%97" target="_blank" rel="noopener">位运算</a>操作，就要将结果扩展成完整的64位。这样，指令中有“直接执行”和“转换执行”的区别，其指令字段是8位或32位，可避免字段过长。x86处理器的32bit<a href="https://baike.baidu.com/item/%E5%AF%BB%E5%9D%80%E7%A9%BA%E9%97%B4/7848599" target="_blank" rel="noopener">寻址空间</a>限制在4GB内存，而IA-64的处理器又不能兼容x86。AMD考虑顾客需求，加强x86<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86/238130" target="_blank" rel="noopener">指令集</a>的功能，使这套指令集可同时支持64位的运算模式，因此AMD把它们的结构称之为x86-64。<strong>总之最近几年的电脑都是64位处理器的cpu</strong></p><h3><span id="在虚拟机上导入archlinux的iso">在虚拟机上导入archlinux的iso</span></h3><p>选择x64，若未跳出此选项进入bios（一般是F2，F10和Del键）enable虚拟机选项</p><h4><span id="bios的两种形式">BIOS的两种形式</span></h4><p><strong>BIOS包含UEFI和legacy（传统）两种启动模式</strong>，<strong>UEFI</strong>全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。UEFI方式减少了BIOS的自检过程，因此能够缩短开机时间，UEFI只支持64为系统且磁盘分区必须为gpt模式。如果你的PC在UEFI启动模式下预装了Win10，你会发现有两个很小的隐藏分区。一个叫<strong>ESP</strong>(EFI系统分区)，另一个<strong>MSR</strong>(Microsoft保留分区，通常为128MB)，MSR是windows要求的。ESP对UEFI启动模式很重要，UEFI的引导程序是以后缀名为.efi的文件存放在ESP分区中的，ESP分区采用fat32文件系统。此外，可能还存在一个小分区叫<strong>WinRETools</strong>，这个是win10的恢复分区</p><h4><span id="csm">CSM</span></h4><p>CSM是一个兼容支持模块，可以让新的UEFI BIOS兼容老的legacy+MBR启动模式。</p><h4><span id="gpt">GPT</span></h4><p>GPT是一种<strong>新型磁盘模式</strong>，与我们常用的MBR磁盘相比更稳定，自纠错能力更强，一块磁盘上主分区数量不受限制，支持大于2T的总容量及大于2T的分区，并且几乎没有上限，最大支持到128个分区，分区大小支持到256TB。</p><blockquote><p>补充：GPT和MBR和都是引导硬盘或者u盘进去<a href="https://www.baidu.com/s?wd=%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">操作系统</a>的主<a href="https://www.baidu.com/s?wd=%E5%BC%95%E5%AF%BC%E6%96%87%E4%BB%B6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">引导文件</a>，MBR识别最大2TB的分区，GPT可以识别最大256TB分区， 相比之下MBR更安全。</p></blockquote><hr><h2><span id="安装archlinux">安装archlinux</span></h2><p>不是UEFI模式，不需要验证启动模式。</p><hr><h3><span id="connect-to-the-lnternet">Connect to the lnternet</span></h3><p>The installation image enables the <a href="https://wiki.archlinux.org/index.php/Dhcpcd" target="_blank" rel="noopener">dhcpcd</a> daemon for <a href="https://git.archlinux.org/archiso.git/tree/configs/releng/airootfs/etc/udev/rules.d/81-dhcpcd.rules" target="_blank" rel="noopener">wired network devices</a> on boot. The connection may be verified with <a href="https://en.wikipedia.org/wiki/ping_(networking_utility" target="_blank" rel="noopener">ping</a>): </p><pre><code># ping archlinux.org</code></pre><p>If no connection is available, <a href="https://wiki.archlinux.org/index.php/Stop" target="_blank" rel="noopener">stop</a> the <em>dhcpcd</em> service with <code>systemctl stop dhcpcd@*interface*</code> where the  <em>interface</em> name can be <a href="https://en.wikipedia.org/wiki/Command-line_completion" target="_blank" rel="noopener">tab-completed</a>. Proceed to configure the network as described in <a href="https://wiki.archlinux.org/index.php/Network_configuration" target="_blank" rel="noopener">Network configuration</a>.</p><h4><span id="dhcped">dhcped</span></h4><p>The <a href="https://www.archlinux.org/packages/?name=dhcpcd" target="_blank" rel="noopener">dhcpcd</a> package is part of the <a href="https://www.archlinux.org/groups/x86_64/base/" target="_blank" rel="noopener">base</a> group, so it is likely already installed on your system.</p><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一个<strong>局域网的网络协议</strong>，使用UDP协议工作， 主要有两个用途：</p><blockquote><ul><li>给内部网络或网络服务供应商自动分配IP地址，</li></ul></blockquote><blockquote><ul><li>给用户或者内部网络管理员作为对所有计算机作中央管理的手段，</li></ul></blockquote><p><strong>DHCP具有以下功能</strong></p><ol><li><p>保证任何IP地址在同一时刻只能由一台DHCP客户机所使用。</p></li><li><p>DHCP应当可以给用户分配永久固定的IP地址。</p></li><li><p>DHCP应当可以同用其他方法获得IP地址的主机共存（如手工配置IP地址的主机）。</p></li><li><p>DHCP服务器应当向现有的BOOTP客户端提供服务。</p></li></ol><hr><h3><span id="分区">分区</span></h3><h4><span id="分区方式">分区方式</span></h4><h5><span id="选择-gpt-还是-mbr">选择 GPT 还是 MBR</span></h5><p><a href="https://wiki.archlinux.org/index.php/GUID_Partition_Table" target="_blank" rel="noopener">GUID Partition Table</a> （GPT）是一种更灵活的分区方式。它正在逐步取代<a href="https://wiki.archlinux.org/index.php/Master_Boot_Record" target="_blank" rel="noopener">Master Boot Record</a> （MBR）系统。GPT相对于诞生于MS-DOS时代的MBR而言，有许多优点。新版的<em>fdisk</em>（MBR）和<em>gdisk</em>（GPT）使得使用GPT或者MBR在可靠性和性能最大化上都非常容易。</p><p>在做出选择前，需要考虑如下内容：</p><ul><li>如果使用 GRUB legacy 作为bootloader，必须使用MBR。</li><li><strong>如果使用传统的BIOS（legacy)，并且双启动中包含 Windows （无论是32位版还是64位版），必须使用MBR</strong></li><li>如果使用 <a href="https://wiki.archlinux.org/index.php/UEFI" target="_blank" rel="noopener">UEFI</a> 而不是BIOS，并且双启动中包含 Windows 64位版，必须使用GPT。</li><li>非常老的机器需要使用 MBR，因为 BIOS 可能不支持 GPT.</li><li>如果不属于上述任何一种情况，可以随意选择使用 GPT 还是 MBR。由于 GPT 更先进，建议选择 GPT。</li><li>建议在使用 <a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface" target="_blank" rel="noopener">UEFI</a> 的情况下选择 GPT，因为有些 UEFI firmware 不支持从 MBR 启动。</li></ul><blockquote><p>补充：MBR（Master Boot Record）,即主引导记录，位于整个硬盘的0磁道0柱面1扇区。不过，在总共512字节的主引导扇区中，MBR只占用了其中的446个字节（偏移0–偏移1BDH），另外的64个字节（偏移1BEH–偏移1FDH）交给了DPT(Disk<br>PartitionTable硬盘分区表),最后两个字节”55，AA”（偏移1FEH-偏移1FFH）是分区的结束标志。这个整体构成了硬盘的主引导扇区。</p></blockquote><h4><span id="分区表">分区表</span></h4><p>目前有三种分区类型：</p><ul><li>主分区（Primary）</li><li>扩展分区（Extended）<ul><li>逻辑分区（Logical）</li></ul></li></ul><p><strong>主分区</strong>每个磁盘或者RAID卷上只能有4个，可设置为可启动状态。如果分区方案要求使用4个以上的分区，就需将至少一个分区设置为<strong>扩展分区</strong>,并在上面建立<strong>逻辑分区</strong>。<strong>扩展分区</strong>可以被看作是容纳逻辑分区的容器。硬盘上<em>最多只能有1个</em>扩展分区。如果磁盘上有1个扩展分区，<em>它也被看作是1个主分区</em>。因此只能另外再建立3个主分区（例如3个主分区加1个扩展分区）。扩展分区内所包含的逻辑分区数量没有限制。如果在双重启动中有Windows，Windows需要占据一个主分区。</p><blockquote><p>通常习惯是创建主分区<em>sda1</em>到<em>sda3</em>，然后建立一个扩展分区<em>sda4</em>。<em>sda4</em>中包含<em>sda5</em>，<em>sda6</em>等逻辑分区。</p></blockquote><blockquote><p>命名为sda_的原因：SCSI接口设备是用sd命名的，其中a表示硬盘编号可能是a、b、c等等,sda是未分区、未格式化的原始硬盘空间。</p></blockquote><blockquote><p>只能分配4个主分区的原因：MBR（Master Boot Record）只有存放4个分区信息的空间（64字节）</p></blockquote><h4><span id="分区工具">分区工具</span></h4><p>Linux has at least 3 disk tools FDISK;CFDISK;SFDISK. <em>这里使用有交互界面的 <strong>cfdisk</strong> 工具</em></p><blockquote><p> cfdisk和fdisk没有联系但功能一样</p></blockquote><h4><span id="开始分区">开始分区</span></h4><p>When recognized by the live system, disks are assigned to a <a href="https://en.wikipedia.org/wiki/Device_file#Naming_conventions" target="_blank" rel="noopener">block device</a> such as <code>/dev/sda</code> or <code>/dev/nvme0n1</code>. To identify these devices, use <a href="https://wiki.archlinux.org/index.php/Lsblk" target="_blank" rel="noopener">lsblk</a> or <em>fdisk</em>.</p><pre><code># fdisk -l</code></pre><pre><code># lsblk</code></pre><blockquote><p> 区别：fdisk列出所有block device，lsblk则更简洁，只列出loop0，sr0和硬盘，<strong>推荐用lsblk查看分区情况</strong></p></blockquote><p>使用cfdisk工具进行新建分区等操作</p><pre><code># cfdisk</code></pre><h6><span id="简单英文解释">简单英文解释</span></h6><ol><li>bootable：可引导的（<em>待补充</em>）</li><li>resize：重新指定分区大小，当硬盘空间为8g，已有分区为8g，则需resize使已有分区&lt;8g才能够新建分区。</li><li>type：the type of partition,比如（Linux,Linux extended,CP/M)</li><li>write: 只有在进行此操作后此前进行过的修改才会保存</li><li>dump：</li><li>quit:<strong>不保存</strong>在write之前的修改并退出</li></ol><hr><blockquote><p>补充：root是用户名，前面数字是上一个命令的exit status，出现1root，127root等是某种东西报错，使用exit回到root。</p></blockquote><hr><h4><span id="对分区进行格式化">对分区进行格式化</span></h4><pre><code># mkfs.ext4 /dev/sda1</code></pre><blockquote><p>添加分区之前要将磁盘格式化为某个具体的文件格式，这样才能正常存储和读取。</p><p>使用mkfs -t 格式类型 磁盘路径 或 mkfs.格式类型 磁盘路径</p></blockquote><h5><span id="ext4">ext4</span></h5><p>EXT4（第四扩展文件系统）：文件系统是Linux系统下的日志文件系统，是ext3文件系统的后继版本，但是Ext4是Linux文件系统的一次改进。在很多方面，Ext4相对于Ext3的进步要远超过Ext3相对于Ext2的进步。Ext3相对于 Ext2的改进主要在于日志方面，但是Ext4相对于Ext3的的改进是更深层次的，是文件系统数据结构方面的优化，是一个高效的、优秀的、可靠的和极具特点的文件系统，并且EXT3可以转为EXT4的。</p><hr><h3><span id="挂载文件系统">挂载文件系统</span></h3><p><a href="https://wiki.archlinux.org/index.php/Mount" target="_blank" rel="noopener">Mount</a> the file system on the root partition to <code>/mnt</code>, for example:</p><p>使/dev/sda1上的文件系统挂载到/mnt上</p><pre><code>#mount /dev/sda1 /mnt</code></pre><p>为任何剩余的分区创建安装点并相应地安装它们：</p><pre><code>#mkdir /mnt/boot #mount /dev/sda2/ mnt/boot</code></pre><p>取消挂载</p><pre><code>#umount /dev/sda2</code></pre><p>或者q取消全部挂载</p><pre><code>#umount /mnt</code></pre><p>列出已安装的文件系统</p><pre><code>#findmnt</code></pre><p><em>findmnt</em>采用各种参数，可以过滤输出并显示其他信息。例如，它可以将设备或挂载点作为参数来仅显示有关指定内容的信息：</p><pre><code># findmnt /dev/sda1</code></pre><h5><span id="mount">mount</span></h5><p>This attaches the filesystem on <code>/dev/sda1</code> at the directory <code>/mnt</code>, making the contents of the filesystem <strong>visible</strong>. Any data that existed at <code>/mnt</code> before this action is made <strong>invisible</strong> until the device is <strong>unmounted</strong>.</p><h5><span id="源于linux学习笔记二什么是挂载mount的用处在哪">源于</span></h5><p>linux操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</p><p>/dev/sda1不是它的目录。虽然/dev是个目录，但/dev/sda1不是目录。可以发现ls/dev/sda1无法执行。/dev/sda1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</p><blockquote><ul><li>补充：一般情况下关机自动取消挂载</li><li>可配置文件是他永久挂载</li></ul></blockquote><hr><h2><span id="installation">Installation</span></h2><h3><span id="select-the-mirrors">Select the mirrors</span></h3><p>Packages to be installed must be downloaded from <a href="https://wiki.archlinux.org/index.php/Mirrors" target="_blank" rel="noopener">mirror servers</a>, which are defined in <strong><code>/etc/pacman.d/mirrorlist</code>.</strong> On the live system, all mirrors are enabled, and sorted by their synchronization status and speed at the time the installation image was created.</p><p>The higher a mirror is placed in the list, the more priority it is given when downloading a package. You may want to edit the file accordingly, and <strong>move the geographically closest mirrors to the top of the list</strong>, although other criteria should be taken into account.</p><p>This file will later be copied to the new system by <em>pacstrap</em>, so it is worth getting right.</p><h4><span id="更改镜像源">更改镜像源</span></h4><p>更改镜像源的原因与从开源镜像站下载iso的原因相同，都是为了下载更快更稳定。</p><p>打开镜像源文件</p><pre><code>vim /etc/pacman.d/mirrorlist</code></pre><p>在开头模仿已有镜像源的样子(在后面加上…）加入各镜像站，推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华镜像站</a>,<a href="https://mirrors.163.com/" target="_blank" rel="noopener">网易镜像站</a>,可参考<a href="https://www.cnbeta.com/articles/soft/194758.htm" target="_blank" rel="noopener">大陆各镜像站汇总</a>和<a href="https://www.archlinux.org/mirrors/status/" target="_blank" rel="noopener">镜像汇总</a>，用w保存编辑，q退出，<strong>!q</strong>是不保存编辑并退出 </p><h3><span id="install-the-base-packages">Install the base packages</span></h3><p>Use the <a href="https://projects.archlinux.org/arch-install-scripts.git/tree/pacstrap.in" target="_blank" rel="noopener">pacstrap</a> script to install the <a href="https://www.archlinux.org/groups/x86_64/base/" target="_blank" rel="noopener">base</a> package group:</p><pre><code># pacstrap /mnt base</code></pre><p>This group does not include all tools from the live installation, such as <a href="https://www.archlinux.org/packages/?name=btrfs-progs" target="_blank" rel="noopener">btrfs-progs</a> or specific wireless firmware; see <a href="https://projects.archlinux.org/archiso.git/tree/configs/releng/packages.x86_64" target="_blank" rel="noopener">packages.x86_64</a> for comparison.</p><p>To <a href="https://wiki.archlinux.org/index.php/Install" target="_blank" rel="noopener">install</a> packages and other groups such as <a href="https://www.archlinux.org/groups/x86_64/base-devel/" target="_blank" rel="noopener">base-devel</a>, append the names to <em>pacstrap</em> (space separated) or to individual <a href="https://wiki.archlinux.org/index.php/Pacman" target="_blank" rel="noopener">pacman</a> commands after the <a href="https://wiki.archlinux.org/index.php/Installation_guide#Chroot" target="_blank" rel="noopener">#Chroot</a> step.</p><blockquote><ul><li>pacstrap：按字面理解，pac就是package（软件包），strap的意思是用带子捆扎，pacstrap意思就是打好包的软件，在arch系统这是一个脚本文件的名称，它的作用就是安装arch基本系统。</li><li>base package group：<em>基本</em>的软件包<em>包括</em>了系统运行所必需的所有软件包。比如有GNU BASH shell、文件压缩工具、文件<em>系统</em>管理工具、C 语言库、压缩工具等</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python的flask框架</title>
      <link href="/2018/11/17/python%E7%9A%84flask%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/11/17/python%E7%9A%84flask%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>flask框架的初步尝试</p><hr><h2><span id="任务">任务</span></h2><p>做出一个随机生成身份证码的网页</p><hr><h2><span id="前期准备">前期准备</span></h2><ol><li><a href="https://www.bilibili.com/video/av19817183/?p=14" title="黑马程序员的入门视频" target="_blank" rel="noopener">黑马程序员入门视频</a>（表单之前即可完成任务）</li><li><a href="https://dormousehole.readthedocs.io/en/latest/" title="flask官方中文手册" target="_blank" rel="noopener">flask官方中文手册</a></li><li><a href="http://flask.pocoo.org/" title="flask官方英文手册" target="_blank" rel="noopener">flask官方英文手册</a></li><li>pycharm3专业版</li><li>在终端上生成身份证的代码</li></ol><h3><span id="安装flask">安装flask</span></h3><pre><code>pip install Flask</code></pre><p>在命令行上输完这条命令就可以开心地开始用py啦~（话说我不知道如果不输这条命令会有什么样的结果诶）</p><h3><span id="各文件夹里的内容">各文件夹里的内容</span></h3><blockquote><p><strong>template_folder</strong>：模板所在文件夹的名字</p><p>此任务只需用到这个文件夹即可，在templates文件夹里创建html类型，html上的内容会显示在页面上</p><p>而py类型的文件是单独存放的</p></blockquote><p><strong>root_path</strong>：可以不用填，会自动找到，当前执行文件，所在目录地址</p><p>在return render_template时会将上面两个进行拼接，找到对应的模板地址</p><p><strong>static_folder</strong>：静态文件所在文件的名字，默认是static，可以不用填</p><p><strong>static_url_path</strong>：静态文件的地址前缀，写成什么，访问静态文件时，就要在前面加上这个</p><pre><code>app = Flask(__name__,template_folder=&#39;templates&#39;,static_url_path=&#39;/xxxxxx&#39;)</code></pre><p> 如：在根目录下创建目录，templates和static，则return render_template时，可以找到里面的模板页面；如在static文件夹里存放11.png，在引用该图片时，静态文件地址为：/xxxxxx/11.png</p><hr><h2><span id="基本操作">基本操作</span></h2><p>放在每个函数最前面，/是指路径，get是获得网页内容，post是向网页进行推送，方法可按需选择</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#py文件里面的内容</span></code></pre><p>需要导入的文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request</code></pre><p>获取用户输入的参数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#py文件里面的内容</span>    <span class="token comment" spellcheck="true"># 获取参数 year month day</span>    year <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span>    month <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span>    date <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span></code></pre><p>此时html里相关部分的内容：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>出生年份：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>&lt;input type="text"name="year"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>出生月份：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>&lt;input type="text"name="month"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>出生日期：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>&lt;input type="text"name="date"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    &lt;input type="submit"value="提交"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>py里面get的变量名必须和html的name相同</strong></p></blockquote><hr><h4><span id="上述内容的简单解释">上述内容的简单解释</span></h4><h5><span id="form">form</span></h5><p>form是显示出来的表格</p><p> html的/form是指form结束的意思</p><h5><span id="注释">注释</span></h5><p>py的注释为#</p><p>html的注释为</p><h5><span id="变量后面会有相关的代码和更详细的解释现在看不懂也没关系">变量（后面会有相关的代码和更详细的解释，现在看不懂也没关系）</span></h5><p>html中的</p><pre><code>{{}}</code></pre><p>是变量模块，可在p y里面用return（）将python里的变量输入到html中的变量然后显示出来，html中得到的变量可通过在py中用requet. form.get（）传给python</p><h5><span id="关于导入的文件">关于导入的文件</span></h5><blockquote><p>render_template: 有了这个文件才能在python和html中传输变量</p><p>flash：后面会用到的，作用大概是将py里面想要传送到页面上的语句通过html文件里的</p><p>get_flashed_messages()捕捉到，然后在页面上显示出来 ，此操作需设置app.secret_key= 进行加密</p><p>request：python通过request请求得到用户在网页上输入的类型</p></blockquote><h5><span id="html里面的基本格式说明">html里面的基本格式说明</span></h5><blockquote><ul><li>&lt; br &gt; 换行</li></ul></blockquote><blockquote><ul><li>label里面是在页面山会显示出来的内容</li></ul></blockquote><blockquote><ul><li><p>type属性如下表</p><p>属性值</p><p>| 值       | 描述                                                         |<br>| ——– | ———————————————————— |<br>| button   | 定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）。 |<br>| checkbox | 定义复选框。                                                 |<br>| file     | 定义输入字段和 “浏览”按钮，供文件上传。                      |<br>| hidden   | 定义隐藏的输入字段。                                         |<br>| image    | 定义图像形式的提交按钮。                                     |<br>| password | 定义密码字段。该字段中的字符被掩码。                         |<br>| radio    | 定义单选按钮。                                               |<br>| reset    | 定义重置按钮。重置按钮会清除表单中的所有数据。               |<br>| submit   | 定义提交按钮。提交按钮会把表单数据发送到服务器。             |<br>| text     | 定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符。 |</p></li></ul></blockquote><hr><p>省略python里随机生成身份证部分的代码</p><p>下面是判断参数的代码：</p><pre class=" language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># 判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取参数 year month day</span>        year <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span>        month <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span>        date <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断参数是否完整</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> date<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span>u<span class="token string">'请将您的资料填写完整'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断输入是否符合要求</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#将str转换成int，text类型里面得到的是字符</span>            year <span class="token operator">=</span> int<span class="token punctuation">(</span>year<span class="token punctuation">)</span>            month <span class="token operator">=</span> int<span class="token punctuation">(</span>month<span class="token punctuation">)</span>            date <span class="token operator">=</span> int<span class="token punctuation">(</span>date<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">999</span> <span class="token operator">or</span> year <span class="token operator">></span> <span class="token number">2018</span> <span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>date <span class="token operator">&lt;</span> <span class="token number">0</span>  <span class="token operator">or</span> date <span class="token operator">></span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>month <span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">or</span> month <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                flash<span class="token punctuation">(</span>u<span class="token string">'资料错误'</span><span class="token punctuation">)</span></code></pre><p>html：</p><pre class=" language-html"><code class="language-html">{% for message in get_flashed_messages() %}    {{message}}{% endfor %}</code></pre><h4><span id="上述内容的简单解释">上述内容的简单解释</span></h4><pre><code>{% %}</code></pre><p>是html中的控制模块，由于message是变量，则需要</p><pre class=" language-{{}}"><code class="language-{{}}">{{}}</code></pre><p>变量模块;<strong>get_flashed_messages()是个函数，必须要加（），否则会报错</strong></p><h5><span id="py里面的u">py里面的u’ ‘</span></h5><p>对里面的字符进行转码以使他正确输出，否则有可能会编码错乱导致报错</p><hr><p><strong>最后一部分的讲解：return</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'success.html'</span><span class="token punctuation">,</span> listID<span class="token operator">=</span>listID<span class="token punctuation">)</span></code></pre><p>返回success.html文件，并将list ID传给success.html（list ID可以是list数组，也可以是 int变量等任何变量，<strong>但是必须和文件里变量名相同，前一个list ID是success.html文件里的变量名，后一个是py里的变量名</strong>。</p><hr><h2><span id="基础知识的讲解就到此完毕啦撒花">基础知识的讲解就到此完毕啦！！！撒花！</span></h2><h2><span id="总结">总结</span></h2><p>如果看了这篇文章之后还云里雾里的话，强烈推荐先去看黑马程序员里面的视频再回来看这篇文章哟，并且可以在这个程序里面加入表单等操作来更装逼一点~~对了，如果页面不能正确显示报错的话心态不要爆照，请回到py里面看error（error get下面的部分）出现在哪里以进行修改哦<strong>注意缩进，（），大小写等错误</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些关于c的小技巧和基础知识</title>
      <link href="/2018/11/14/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8Ec%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%92%8C%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/11/14/%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8Ec%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%92%8C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>c的小技巧和基础知识</p><hr><h2><span id="基础知识">基础知识</span></h2><h3><span id="1-十进制的ascii码">1. 十进制的ASCII码</span></h3><blockquote><ul><li>0~9数字对应十进制48-57</li></ul></blockquote><blockquote><ul><li>a~z字母对应的十进制 十六进制61-7A</li></ul></blockquote><blockquote><ul><li>A~Z字母对应的十进制65-90 十六进制41-5A</li></ul></blockquote><blockquote><ul><li>汉语的ASCII码与英文数字不同，占两个字节，且为了便于区分每一个字节的第一个符号位为1，转化成10进制则是<strong>负数</strong></li></ul></blockquote><hr><h3><span id="2-c语言里合法的标识符">2. c语言里合法的标识符</span></h3><p>C语言规定,标识符以<strong>字母或下划线开头</strong>,<strong>后跟若干字母,下划线或数字</strong>,大小写字母组成的标识符是不同的,标识符的长度没有限制.例如,以下标识符是合法的:a,x,x3,BOOK_1,sum5.</p><hr><h3><span id="3-输入与输出格式">3. 输入与输出格式</span></h3><hr><h4><span id="整数与浮点数">整数与浮点数</span></h4><p>对比代码如下</p><blockquote><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果为<strong>1</strong></p></blockquote><hr><blockquote><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​       结果为<strong>0</strong></p><ul><li>double在接受输入时必须是lf，否则值为0，输出可以是f。</li></ul></blockquote><hr><blockquote><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果为 <strong>1.500000</strong></p></blockquote><hr><ul><li><strong>综上 输入和输出格式最好一致</strong></li></ul><hr><h4><span id="输出格式">输出格式</span></h4><p>%xd，右对齐，一共占x数字位，原数字所占位数大于x位按原来的数字位算，小于x位按x位算</p><p>%-xd，左对齐</p><p>%0xd，大于x位同上，小于x位多余位数用0补齐（可用于“三位数反转”）。</p><hr><h4><span id="换行tips">换行(tips)</span></h4><blockquote><ul><li>每五个数一行，if count %5==0</li></ul></blockquote><hr><h4><span id="tips">+（tips）</span></h4><blockquote><ul><li><p>使x=x+x</p><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d=%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></blockquote><h3><span id="4-boolean">4. boolean</span></h3><p>单个整数值可以表示真假，0为假，其他数值为真。</p><hr><h3><span id="5-运算符">5. 运算符</span></h3><p>运算符包含算术运算符，关系运算符（&lt;&gt;高于==和！=），逻辑运算符，条件运算符，赋值运算符，优先值递减。</p><blockquote><ul><li>c的逻辑运算符采用短路策略。</li><li>条件运算符（?:）是C语言中唯一具的<a href="https://www.baidu.com/s?wd=%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">三目运算符</a>，就是说它有三个运算对象。</li><li>例如：(a&gt;b)?a+b:a-b<br>其中，如果a=2，b=1，那么a&gt;b成立，执行a+b这个表达式，运算结果为3；但如果a=2，b=3，那么a&gt;b不成立，那么执行a-b这个表达式，运算结果为-1.</li></ul></blockquote><hr><h3><span id="6-switch">6. switch</span></h3><pre class=" language-c"><code class="language-c"> <span class="token keyword">switch</span>（x）<span class="token punctuation">{</span>   <span class="token keyword">case</span> x1：；<span class="token keyword">break</span>；<span class="token comment" spellcheck="true">//当x是x1的时候则执行</span>   <span class="token keyword">case</span> x2：；<span class="token keyword">break</span>；   <span class="token keyword">default</span>：；</code></pre><hr><h3><span id="7-goto">7. goto</span></h3><pre class=" language-c"><code class="language-c"><span class="token keyword">goto</span> x；x：</code></pre><hr><h3><span id="8-swap">8. swap</span></h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> temp <span class="token punctuation">;</span>      temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>      <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>      <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  </code></pre><hr><h3><span id="9-调用头文件">9. 调用头文件</span></h3><p>#include “test.h”  （自己的项目内）</p><p>#include &lt;stdio.h&gt;</p><hr><h3><span id="10-宏定义">10. 宏定义</span></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> exchange(a,b) { int t;t=a;a=b;b=t;}</span><span class="token comment" spellcheck="true">//注意放在一行里//定义函数</span><span class="token macro property">#<span class="token directive keyword">define</span> FALSE 0</span><span class="token macro property">#<span class="token directive keyword">define</span> SQ(x) (x)*(x)</span><span class="token macro property">#<span class="token directive keyword">define</span> LAG ></span>综合运用：<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAX</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXIMUM(x,y) (x>y)?x:y</span><span class="token macro property">#<span class="token directive keyword">define</span> MINIMUM(x,y) (x>y)?y:x</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> MAX </span><span class="token comment" spellcheck="true">//如果max被define则执行下面一句，否则执行else后面的一句</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更大的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MAXIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更小的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MINIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">//每次必加</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MIN</span><span class="token comment" spellcheck="true">//如果min没被define则执行下面一句，</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更小的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MINIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更大的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MAXIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">undef</span> MAX</span><span class="token comment" spellcheck="true">//取消max的define</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> MAX</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更大的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MAXIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更小的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MINIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">define</span> MIN</span><span class="token comment" spellcheck="true">//define min</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MIN</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更小的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MINIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"更大的数字是 %d\n"</span><span class="token punctuation">,</span><span class="token function">MAXIMUM</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>以上实例输出结果为：</p><p>更大的数字是 20<br>更小的数字是 10<br>更小的数字是 10<br>更大的数字是 20</p></blockquote><hr><h3><span id="11-静态变量">11. 静态变量</span></h3><hr><p><strong>修饰变量，变量又分为局部和全局变量，但他们都存在内存的静态区</strong></p><p><strong>静态区。所以即使这个函数运行结束，这个静态变量的值不会被销毁，函数下次使用时仍能使用。</strong></p><hr><h4><span id="静态全局变量">静态全局变量</span></h4><p>作用于仅限于变量被定义的文件。其他文件即使用extern声明也没法使用，准确说就是作用域是从定义处开始，到文件结束， 在定义处之前的那些代码不能使用它。</p><hr><h4><span id="静态局部变量">静态局部变量</span></h4><p>static局部变量中文名叫<strong>静态局部变量</strong>。</p><p>它与普通的局部变量比起来有如下几个区别:</p><blockquote><ul><li>位置：静态局部变量被编译器放在全局存储区.data，所以它虽然是局部的，但是在程序的整个生命周期中存在。</li><li>访问权限：静态局部变量只能被其作用域内的变量或函数访问。                                                                     也就是说虽然它会在程序的整个生命周期中存在，由于它是static的，它不能被其他的函数和源文件访问。</li><li>静态局部变量如果没有被用户初始化，则会被编译器自动赋值为0，以后每次调用静态局部变量的时候都用上次调用后的值。<br>这个比较好理解，每次函数调用静态局部变量的时候都修改它然后离开，下次读的时候从全局存储区读出的静态局部变量就是上次修改后的值。</li></ul></blockquote><hr><h4><span id="代码">代码</span></h4><p>第一种：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> static_i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"static_i=%d\n"</span><span class="token punctuation">,</span>static_i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    static_i<span class="token operator">++</span><span class="token punctuation">;</span>以上实例输出结果为：i<span class="token operator">=</span><span class="token number">0</span>（不变）static_i<span class="token operator">=</span><span class="token number">0</span>（静态可以变）i<span class="token operator">=</span><span class="token number">0</span>static_i<span class="token operator">=</span><span class="token number">1</span>i<span class="token operator">=</span><span class="token number">0</span>static_i<span class="token operator">=</span><span class="token number">2</span>注：但局部静态不能使main里的变量改变</code></pre><p>第二种：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">;</span>    num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num 变量为 %d \n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            <span class="token keyword">static</span> <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只进行一次初始化</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内置模块 num 变量为 %d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>以上实例输出结果为：num 变量为 <span class="token number">2</span> 内置模块 num 变量为 <span class="token number">1</span>num 变量为 <span class="token number">3</span> 内置模块 num 变量为 <span class="token number">2</span>num 变量为 <span class="token number">4</span> 内置模块 num 变量为 <span class="token number">3</span>此外：全局变量只初始化一次 不管是<span class="token keyword">static</span> 还是<span class="token keyword">extern</span>全局变量加<span class="token keyword">static</span> 是为了限制其作用域（ 仅在本文件中有效 在其他文件中不可见） </code></pre><h4><span id="补充">补充</span></h4><p>（auto int）实际上是int（auto 可省略）<br>在C语言中使用<strong>auto</strong>关键字声明一个变量为自动变量，是C语言中应用最广泛的一种类型，<br>在函数内定义变量时，如果没有被声明为其他类型的变量都是自动变量，也就是说，省去类型说明符auto的都是自动变量。<br>这里的其他类型指的是变量的存储类型即：静态类型变量（static ）、寄存器类型变量（register）和外部类型变量（extern）。</p><h3><span id="12-学会按位与amp按位或按位异或">12. 学会按位与（&amp;）按位或（|）按位异或（^)</span></h3><h4><span id="按位与">按位与</span></h4><h5><span id="原理">原理</span></h5><p>0&amp;0=0; 0&amp;1=0; 1&amp;0=0; 1&amp;1=1 </p><h5><span id="代码">代码</span></h5><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token number">077</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>a<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a &amp; b(decimal) 为 %d \n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">&amp;</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a &amp; b(decimal) 为 %d \n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>以上实例输出结果为：a <span class="token operator">&amp;</span> <span class="token function">b</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span> 为 <span class="token number">3</span> a <span class="token operator">&amp;</span> <span class="token function">b</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span> 为 <span class="token number">3</span></code></pre><h5><span id="代码解释">代码解释</span></h5><p>0开头是8进制数， 077 = 8*7+7=63， 其2进制是 111111<br>3的2进制 编码是 011<br>2者作“按位与”运算后，结果是 011,所以是3；<br>而77的二进制是 1001101, 和3(011)作“按位与”运算后, 是 001, 所以是1</p><hr><h3><span id="按位或">按位或（|）</span></h3><p>0|0=0; 0|1=1; 1|0=1; 1|1=1 </p><hr><h4><span id="按位异或">按位异或（^)</span></h4><p>0^0=0; 0^1=1; 1^0=1; 1^1=0 </p><hr><h4><span id="左移运算ltlt">左移运算&lt;&lt;</span></h4><p>比如0的二进制为00……0000000<br>那么~0就为11……1111111<br>而~0&lt;&lt;4就是将~0的二进制码向左移动4位，右边补0，<br>即得11……1110000</p><hr><h4><span id="~按位取反">~按位取反</span></h4><p>直接计算公式<strong>~a=-(a+1)</strong>;（适用于正数和负数）</p><h5><span id="原理">原理:</span></h5><p>转化成二进制，每位取反，0变1，1变0<br>~0 = ~(0000 0000)2 = (1111 1111)2=255<br>但是javascript默认是有符号的(-127到+126)，所以要求补码(反码+1)再转为负数<br>(1111 1111)的补码是(0000 0001)符号位取反=(1000 0001)=-1<br>转到最后其实就是原码+1再转为负数，跟上面的公式是一样的~a=-(a+1);</p><hr><h4><span id="补码机器里储存的码">补码（机器里储存的码）</span></h4><h5><span id="正数">正数</span></h5><p>正整数的补码是其二进制表示，与原码相同 。</p><h5><span id="负数">负数</span></h5><p>求负整数的补码，将其对应正数二进制表示所有位取反（包括符号位，0变1，1变0）后加1<br>【不算正负号，加起来等于十进制】<br>负数首位为1，正数首位为0.<br>正数：先取反，首位不变再取反后再加1【即加1后变为负数】【取反后（负数）的补码】<br>~1 = ~(0000 0001)= (1111 1110) = (1000 0010) = -2<br>负数：           首位不变取反加1再取反【补码取反】<br>~-1=-1是这样表示的：-1的绝对值是1，二进制0000 0001，取反为1111 1110，加1等于1111 1111，所以-1为1111 1111，这个取反当然是0000 0000<br>不管正负，都是+1后变为符号相反的数。</p><hr><h4><span id="综合运用">综合运用</span></h4><p>题目：取一个整数a从右端开始的4～7位。<br>程序分析：可以这样考虑：<br>(1)先使a右移4位。<br>(2)设置一个低4位全为1,其余全为0的数。可用~(~0&lt;&lt;4)(就是将上一步得到的二进制码（11……1110000）取反，<br>得00……0001111 )<br>(3)将上面二者进行&amp;运算。<br><strong>程序源代码：</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入整数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%o"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>a<span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">;</span>    c<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小套路</span>    d<span class="token operator">=</span>b<span class="token operator">&amp;</span>c<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%o\n%o\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>以上实例输出结果为：请输入整数：<span class="token number">36</span>  <span class="token function">36</span><span class="token punctuation">(</span>八进制<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">11110</span><span class="token punctuation">(</span>二进制<span class="token punctuation">)</span><span class="token number">36</span><span class="token number">1</span></code></pre><h2><span id="小技巧">小技巧</span></h2><h3><span id="1-acm">1. ACM</span></h3><p><strong>可参考<a href="https://www.cnblogs.com/Leo_wl/archive/2013/05/12/3074829.html" target="_blank" rel="noopener">ACM在线测评系统评测程序设计与实现</a></strong></p><blockquote><ul><li>只允许进行算法相关的操作，不允许进行访问网络，画图等操作。</li><li>以回车结尾，行首不应有空格，输出的每两个数或字符串之间应以单个空格隔开。</li><li>由于程序不能直接读取键盘和屏幕，不允许使用getch（），getche（），gotoxy（），clrscr（），conio.h</li><li>输出格式很严格，不允许多字符或少字符，不需要界面友好分。（出现presentation error可能离成功只有一步之遥）</li><li>用double代替float，可能会出现谜之wrong</li><li>如果出现超时和超内存将会分别返回<code>Time Limit Exceeded</code>和<code>Memory Limit Exceeded</code>错误信息，如果程序执行时出现错误，比如非法指针，数组越界等，将会返回<code>Runtime Error</code>信息。如果你的程序没有出现上面的信息，说明程序顺利执行结束了。接下来，就是对你的程序的输出也就是运行结果进行检查，如果你的执行结果和我们的标准答案完全一样，则返回<code>Accepted</code>，也就说明你这个题目做对了。如果除去空格，换行，tab外完全相同，则说明你的代码格式错误，将返回<code>Presentation Error</code>，如果你输出的内容有一部分和标准答案完全一样，但是还输出了一些其他内容，则说明你多输出了，这时候将返回<code>Output Limit Exceeded</code>错误信息，出现其他情况，就说明你的输出结果和标准答案不一样，就是<code>Wrong Answer</code>了</li><li><img src="https://images0.cnblogs.com/blog/353475/201305/12152323-c115069fc92d4edeb8cdc9d3a60dc6d8.jpg&quot;流程图&quot;" alt=""></li></ul></blockquote><hr><h3><span id="2-声明">2. 声明</span></h3><blockquote><ul><li>尽量用const xx声明常数。</li></ul></blockquote><h3><span id="3-菜鸟c示例4的改进">3. 菜鸟c示例4的改进：</span></h3><hr><h4><span id="题目">题目</span></h4><p>输入某年某月某日，判断这一天是这一年的第几天？</p><hr><h4><span id="代码">代码</span></h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> day<span class="token punctuation">,</span>month<span class="token punctuation">,</span>year<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>leap<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n请输入年、月、日，格式为：年,月,日（2015,12,10）\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>year<span class="token punctuation">,</span><span class="token operator">&amp;</span>month<span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 格式为：2015,12,10</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先计算某月以前月份的总天数</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">151</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">181</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">212</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">243</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">273</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">304</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token punctuation">:</span>sum<span class="token operator">=</span><span class="token number">334</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"data error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum<span class="token operator">=</span>sum<span class="token operator">+</span>day<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再加上某天的天数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 判断是不是闰年</span>        leap<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       leap<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leap<span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>month<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// *如果是闰年且月份大于2,总天数应该加一天</span>        sum<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是这一年的第 %d 天。"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4><span id="注意点">注意点</span></h4><blockquote><ul><li>year%400==0||(year%100!=0&amp;&amp;year%4==0)[只需一个else if 不需要goto]</li><li>如果是闰年的处理方法：闰年只是总日期加1天，则if（flag ==1&amp;&amp;month&gt;2)sum++;</li><li>总天数不需要用到for循环，只需要在switch时就进行sum</li><li>month的天数可用数组记录</li></ul></blockquote><hr><h3><span id="4-continue的用法">4. continue的用法</span></h3><blockquote><ul><li>排除法</li></ul></blockquote><hr><h3><span id="5-三目运算符的用途">5. 三目运算符的用途</span></h3><blockquote><ul><li>max = a&gt;b ? a : b ;的功能是取a和b中的大值，并把这个值赋给变量max。</li><li>max=a&gt;b ? a&gt;c ? a : c : b&gt;c ? b : c ;相当于 a&gt;b ? (a&gt;c ? a : c) : (b&gt;c ? b : c)</li></ul></blockquote><h3><span id="6-求最大公因数和最小公倍数">6. 求最大公因数和最小公倍数</span></h3><hr><h4><span id="用处">用处</span></h4><blockquote><p>减小时间复杂度</p></blockquote><hr><h4><span id="示例">示例</span></h4><blockquote><p>被除数 / 除数 = 商 …… 余数<br>6497 / 3869 = 1 …… 2628<br>3869 / 2628 = 1 …… 1241<br>2628 / 1241 = 2 …… 146<br>1241 / 146 = 8 …… 73<br>146 / 73 = 2 …… 0<br>因此最大公约数为:73<br>最小公倍数=两数之积/最大公约数=6497*3869/73=25136893 </p><hr></blockquote><h4><span id="方法">方法</span></h4><h5><span id="辗转相除法">辗转相除法</span></h5><pre class=" language-c"><code class="language-c">   <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                t<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调整除数和被除数的位置</span>   <span class="token punctuation">}</span>    r<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token operator">=</span>b<span class="token punctuation">;</span>        b<span class="token operator">=</span>r<span class="token punctuation">;</span>        r<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>补充：辗转相除法就是用来求最大公因数的，不能直接用来求最小公倍数。但是利用二者的关系，可以很方便的求出最小公倍数。</p></blockquote><hr><h3><span id="7-素数">7. 素数</span></h3><p>判断素数时不需要用flag标记是否为素数，若提前退出，j必小于i，所以if以j = i为条件，成立则为素数。</p><hr><h3><span id="8-后面两个数是前三个数之和">8. 后面两个数是前三个数之和</span></h3><hr><p><strong>不用数组的方法</strong></p><h6><span id="方法一">方法一</span></h6><pre class=" language-c"><code class="language-c">f1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>f1<span class="token operator">=</span>f1<span class="token operator">+</span>f2<span class="token punctuation">;</span>f2<span class="token operator">=</span>f1<span class="token operator">+</span>f2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6><span id="方法二">方法二</span></h6><pre class=" language-c"><code class="language-c">f1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>f2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>sum <span class="token operator">=</span>f1<span class="token operator">+</span>f2<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>f1 <span class="token operator">=</span> f2<span class="token punctuation">;</span>f2 <span class="token operator">=</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="9-代替三重循环">9. 代替三重循环</span></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入 a 和 n：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">;</span>        a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>        t<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+aa+...=%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="10-判断回文字符">10. 判断回文字符</span></h3><blockquote><p>判断是否是回文数,先将此数字按逆序重排,再与原先数值比较:</p></blockquote><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>        sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//亮点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 是回文数\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 不是回文数\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3><span id="11-调用函数进行阶乘的两种方法">11.  调用函数进行阶乘的两种方法</span></h3><hr><p>第一种：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> step<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> step<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p>第二种:</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数声明</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d!=%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">fact</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sum<span class="token operator">=</span>j<span class="token operator">*</span><span class="token function">fact</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3><span id="12-快速排序">12. 快速排序</span></h3><blockquote><ul><li>快速排序要先从右向左检索</li></ul></blockquote><hr><h3><span id="13-判断一个数是否为质数">13. 判断一个数是否为质数</span></h3><hr><h4><span id="思路">思路</span></h4><blockquote><ul><li>质数的定义：只有1和它本身两个因数的自然数，叫质数（或称素数）。<br>（如：由2÷1=2，2÷2=1，可知2的因数只有1和它本身2这两个约数，所以2就是质数。<br>与之相对立的是合数（除了1和它本身两个因数外，还有其它因数的数，叫合数。）</li><li>根据质数的定义，在判断一个数n是否是质数时，只要用1至n-1去除n，看看能否整除即可。</li><li><strong>还有更好的办法</strong>：先找一个数m，使m的平方大于n，再用小于等于m的质数去除n（n为被除数），如果都不能整除，则n必然是质数。                                                                                                                    <ul><li>如我们要判断1993是不是质数，50*50&gt;1993，那么只要用1993除以&lt;50的质数看是否能整除，若不能即为质数。在100内共有25个质数。</li></ul></li></ul></blockquote><hr><hr><h3><span id="14-将一个数组变为逆序">14. 将一个数组变为逆序</span></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> N 10</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始数组是:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//亮点</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n排序后的数组:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3><span id="15-将一个数按要求插入数组">15. 将一个数按要求插入数组</span></h3><hr><p>方法一(逆序)</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> opo<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原始的数组，题目给的</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是原始的数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>opo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n输入一个数,插入原数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>c<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>c<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//使用逆序的话，可以省掉很多过程，而且清晰</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span>opo<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            opo<span class="token punctuation">[</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>opo<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            opo<span class="token punctuation">[</span>c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> opo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//因为是逆序，如果b比第一个小的话写不进去，要特意弄个if</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//哇，逆序超简洁，惊了</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>e<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>e<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>opo<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方法二</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp1<span class="token punctuation">,</span>temp2<span class="token punctuation">,</span>number<span class="token punctuation">,</span>end<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始数组是:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n插入一个新的数字: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    end<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">></span>end<span class="token punctuation">)</span>        a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>number<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp1<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>number<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    temp2<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp1<span class="token punctuation">;</span>                    temp1<span class="token operator">=</span>temp2<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">11</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%4d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span></code></pre><hr><h3><span id="16-求字符串长度">16. 求字符串长度</span></h3><hr><h4><span id="代码">代码</span></h4><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//传入指针（数组）</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>           s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前位置加上*s类型的长度</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><hr><h3><span id="17-滚动数组">17. 滚动数组</span></h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token operator">*</span>arr_end<span class="token punctuation">;</span>    arr_end<span class="token operator">=</span>array<span class="token operator">+</span>n<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//数组最后一个元素的下一个位置</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//滚动直到偏移量为0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        last<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>arr_end<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>arr_end<span class="token number">-1</span><span class="token punctuation">;</span>p<span class="token operator">!=</span>array<span class="token punctuation">;</span><span class="token operator">--</span>p<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//向右滚动一位</span>            <span class="token operator">*</span>p<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>array<span class="token operator">=</span>last<span class="token punctuation">;</span>        <span class="token operator">--</span>offset<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> basic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ACM题解-母牛的故事</title>
      <link href="/2018/11/13/%E6%AF%8D%E7%89%9B%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2018/11/13/%E6%AF%8D%E7%89%9B%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2><span id="题目">题目</span></h2><blockquote><p>Problem Description</p><p>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？</p><p>Input</p><p>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0&lt;n&lt;55)，n的含义如题目中描述。<br>n=0表示输入数据的结束，不做处理。</p><p>Output</p><p>对于每个测试实例，输出在第n年的时候母牛的数量。<br>每个输出占一行。</p><p>Sample Input</p><pre><code>2450</code></pre><p>Sample Output</p><pre><code>246</code></pre></blockquote><h2><span id="题目分析">题目分析</span></h2><p>类似于斐波纳契数列，可得<strong>递推函数</strong></p><blockquote><p>f(n)=n        n&lt;=4</p><p>f(n)=f(n-1) + f(n-3) n&gt;4</p></blockquote><h2><span id="可用方法">可用方法</span></h2><ul><li style="list-style: none"><input type="checkbox" checked> 递推</li><li style="list-style: none"><input type="checkbox" checked> 递归</li><li style="list-style: none"><input type="checkbox" checked> 数组</li></ul><h2><span id="代码">代码</span></h2><h3><span id="递推需要理解">递推（需要理解）</span></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意浮点数3.0,并且由于在第4年成熟所以3年一循环</span><span class="token punctuation">{</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第4年</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第5年</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第6年</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意是n-1</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3><span id="递归思路很清晰的一种解法">递归(思路很清晰的一种解法)</span></h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">// 递推式 f(n) = n n&lt;=4，f(n) = f(n-1) + f(n-3) n>4</span><span class="token keyword">int</span> <span class="token function">cow</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">cow</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cow</span><span class="token punctuation">(</span>n<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判定结束条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算并输出结果</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">cow</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 作者：海岛Blog 来源：CSDN 原文：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>tigerisland45<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">51772927</span> 版权声明：本文为博主原创文章，转载请附上博文链接！</code></pre><hr><h3><span id="数组运用数学思想">数组(运用数学思想）</span></h3><p><strong>当年母牛生下的小牛与几年前的母牛数（也就是当年的成熟牛）是相等的</strong></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">56</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">else</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一年生的小牛在第四年成熟了</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2><span id="总结">总结</span></h2><p><strong>注意找出项与项之间的关系，可在草稿纸上进行推演</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/09/hello-world/"/>
      <url>/2018/11/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><h3><span id="run-server">Run server</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
